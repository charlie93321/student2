<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.0.xsd">



    <context:annotation-config />
    <context:component-scan base-package="com.spring"/>

    <task:annotation-driven  executor="asyncExecutor"  />

    <!--
        当最小的线程数已经被占用满后，新的任务会被放进queue里面，
        当这个queue的capacity也被占满之后，pool里面会创建新线程处理这个任务。
        直到总线程数达到了max size，
        这时系统会拒绝这个任务并抛出TaskRejectedException异常
        （缺省配置的情况下，能够通过rejection-policy来决定怎样处理这样的情况）。缺省值为：Integer.MAX_VALUE
    -->
   <task:executor id="asyncExecutor" pool-size="3-5" queue-capacity="5" />

    <task:executor id="logExecutor" pool-size="10-20" queue-capacity="5" />

</beans>